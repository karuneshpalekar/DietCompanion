apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'


allprojects {
    repositories {
        mavenLocal()
        google()
        maven {
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username System.getenv("ENV_VSTS_MVN_ANDROIDADAL_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDADAL_USERNAME") : project.findProperty("vstsUsername")
                password System.getenv("ENV_VSTS_MVN_ANDROIDADAL_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDADAL_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")
            }
        }
        jcenter()
    }
}

android {

    compileSdkVersion 31
    buildToolsVersion "31.0.0"
    defaultConfig {
        applicationId "com.karunesh.azureauth"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug{

            def credsFile = rootProject.file("secure\\debug_cosmos_key.properties")
            def prop = new Properties()
            prop.load(new FileInputStream(credsFile))
            buildConfigField('String', 'COSMOS_KEY', prop['COSMOS_KEY']) // always use single quotes here

        }
        debug{

            def credsFile = rootProject.file("secure\\debug_blob.properties")
            def prop = new Properties()
            prop.load(new FileInputStream(credsFile))
            buildConfigField('String', 'BLOB_KEY', prop['BLOB_KEY']) // always use single quotes here

        }
        debug{

            def credsFile = rootProject.file("secure\\debug_app_secret.properties")
            def prop = new Properties()
            prop.load(new FileInputStream(credsFile))
            buildConfigField('String', 'APP_SECRET', prop['APP_SECRET']) // always use single quotes here

        }
        release {

            def credsFile = rootProject.file("secure\\release_cosmos_key.properties")
            def prop = new Properties()
            prop.load(new FileInputStream(credsFile))
            buildConfigField('String', 'COSMOS_KEY', prop['COSMOS_KEY']) // always use single quotes here


            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {

            def credsFile = rootProject.file("secure\\release_blob.properties")
            def prop = new Properties()
            prop.load(new FileInputStream(credsFile))
            buildConfigField('String', 'BLOB_KEY', prop['BLOB_KEY']) // always use single quotes here


            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {

            def credsFile = rootProject.file("secure\\release_app_secret.properties")
            def prop = new Properties()
            prop.load(new FileInputStream(credsFile))
            buildConfigField('String', 'APP_SECRET', prop['APP_SECRET']) // always use single quotes here


            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "main"
    productFlavors {
        local {
            // To be used with android-complete only.

            // So that it could look for the 'local' flavor in Broker projects.
            matchingFallbacks = ['local']
        }

        external {}
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    aaptOptions {
        noCompress "tflite"
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    def nav_version = "2.3.5"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def appCenterSdkVersion = '4.3.1'
    implementation 'com.azure.android:azuredata:0.4.0'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
    implementation "androidx.activity:activity-ktx:1.3.1"
    def camerax_version = "1.0.2"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:1.0.0-alpha27"
    implementation 'androidx.window:window:1.0.0-alpha09'
    def lifecycle_version = "2.4.0-alpha03"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    def core_version = "1.7.0"
    // Kotlin
    implementation "androidx.core:core-ktx:$core_version"
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:28.1-android'
    implementation 'org.tensorflow:tensorflow-lite:2.2.0'
    implementation 'com.microsoft.azure.android:azure-storage-android:2.0.0@aar'
    if (findProject(':msal') != null) {
        // For developer team only.
        localImplementation project(':msal')
        externalImplementation 'com.microsoft.identity.client:msal:1.0.+'
    } else {
        // Downloads and Builds MSAL from maven central.
        implementation 'com.microsoft.identity.client:msal:1.0.+'
    }
}
